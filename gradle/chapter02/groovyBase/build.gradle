task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
    archiveBase = 'GRADLE_USER_HOME'
    archivePath = 'wrapper/dists'
    distributionBase = 'GRADLE_USER_HOME'
    distributionPath = 'wrapper/dists'
    distributionUrl = 'https://mirrors.aliyun.com/gradle/distributions/v2.4.0/gradle-2.4-all.zip'
}

// 2.1字符串
task printStringClass << {
    def str1 = '单引号'
    def str2 = "双引号"

    println "单引号定义的字符串类型："+str1.getClass().name
    println "双引号定义的字符串类型："+str2.getClass().name
}

task printStringVar << {
    def name = "zhangsan"

    println '单引号的变量计算:${name}'
    println "双引号的变量计算:${name}"
}

// 2.2集合
task printList << {
    def numList = [1, 2, 3, 4, 5, 6];
    println numList.getClass().name

    println numList[1]      // 访问第二个元素
    println numList[-1]     // 访问最后一个元素
    println numList[-2]     //访问倒数第二个元素
    println numList[1..3]   // 访问第二个到第四个元素

    numList.each {
        println it
    }
}

task printlnMap << {
    def map1 = ['width':1024, 'height':768]
    println map1.getClass().name

    println map1['width']
    println map1.height

    map1.each {
        println "Key:${it.key}, Value:${it.value}"
    }
}

// 2.3方法
task invokeMethod << {
    method1(1, 2)
    method1 1,2
}

def method1(int a, int b) {
    println a+b
}

//在Groovy中，我们定义有返回值的方法时，return语句不是必需的。当没有return的时候，Groovy会把方法执行过程中的最后一句代码作为其返回值
task printMethodReturn << {
    def add1 = method2 1,2
    def add2 = method2 5,3

    println "add1:${add1}, add2:${add2}"
}

def method2(int a, int b) {
    if(a>b) {
        a
    }else {
        b
    }
}

// 2.3.3 代码块是可以作为参数传递的

// 2.4 javaBean
task helloJavaBean << {
    Person p = new Person()

    println "name is: ${p.name}"
    p.name = "lucy"
    println "name is: ${p.name}"
}

class Person {
    private String name
}

// 2.5 闭包
task helloClosure << {
    //使用我们自定义的闭包
    customEach {
        println it
    }
}

def customEach(closure) {
    for(int i in 1..10) {
        closure(i)
    }
}

// 向闭包传递参数
task helloClosure << {
    //多个参数
    eachMap {k,v ->
        println "${k} is ${v}"
    }
}

def eachMap(closure) {
    def map1 = ["name":"lucy", "age":18]
    map1.each(closure(it.key, it.value))
}